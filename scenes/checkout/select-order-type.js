const Markup = require('telegraf/markup');
const WizardScene = require('telegraf/scenes/wizard');
const Composer = require('telegraf/composer');
const { match } = require('telegraf-i18n');
const _ = require('lodash');
const dbService = require('../services/db');

const _types_ = {
  selfService: 0,
  delivery: 1,
}

module.exports = new WizardScene(
  'select-order-type',
  async ctx => {
    ctx.replyWithMarkdown(
      '–ó–∞–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∑–∞–∫–∞–∑ *—Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ* –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ *–¥–æ—Å—Ç–∞–≤–∫—É*',
      Markup.keyboard([
        'üöò –î–æ—Å—Ç–∞–≤–∫–∞', 'üèÉ –°–∞–º–æ–≤—ã–≤–æ–∑',
        ctx.i18n.t('back')
      ], { columns: 2 }).resize().extra()
    );
    ctx.wizard.next();
  },
  new Composer()
    .hears(match('back'), ctx => {
      ctx.scene.enter('menu');
    })
    .hears('üöò –î–æ—Å—Ç–∞–≤–∫–∞', ctx => {
      ctx.scene.state.type = _types_.delivery;
      ctx.replyWithMarkdown(
        `–ö—É–¥–∞ –Ω—É–∂–Ω–æ –¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞—à –∑–∞–∫–∞–∑ üöô?\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é üìç –∏ –º—ã –æ–ø—Ä–µ–¥–µ–ª–∏–º –±–ª–∏–∂–∞–π—à–∏–π –∫ –≤–∞–º —Ñ–∏–ª–∏–∞–ª –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ üíµ.`,
        Markup.keyboard([
          Markup.locationRequestButton('üìç –ú–æ—è –ª–æ–∫–∞—Ü–∏—è'),
          ctx.i18n.t('back'),
        ], { columns: 1 }).resize().extra()
      );
      ctx.wizard.next();
    })
    .hears('üèÉ –°–∞–º–æ–≤—ã–≤–æ–∑', ctx => {
      ctx.scene.state.type = _types_.selfService;
      ctx.replyWithMarkdown(
        `–ì–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å üëÄ?  –ï—Å–ª–∏ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é üìç, –º—ã –æ–ø—Ä–µ–¥–µ–ª–∏–º –±–ª–∏–∂–∞–π—à–∏–π –∫ –≤–∞–º —Ñ–∏–ª–∏–∞–ª`,
        Markup.keyboard([
          Markup.locationRequestButton('üìç –ú–æ—è –ª–æ–∫–∞—Ü–∏—è'),
          ctx.i18n.t('back'),
        ], { columns: 1 }).resize().extra()
      );
      ctx.wizard.next();
    })
    .on('text', ctx => {
      ctx.scene.reenter();
    }),
  new Composer()
    .hears(match('back'), ctx => {
      ctx.scene.reenter();
    })
    .on('location', ctx => {
      ctx.scene.state.location = ctx.message.location;
      const { type } = ctx.scene.state;
      ctx.scene.enter(
        type == _types_.delivery ? 'delivery' : 'self-service',
        {
          ...ctx.scene.state,
          origin: 'select-order-type'
        }
      );
    })
    .on('text', ctx => {
      ctx.scene.state.address = ctx.message.text;
      ctx.replyWithMarkdown(
        '–ú—ã –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –≤–∞—Å, –∫–æ–≥–¥–∞ –≤—ã –≤–≤–æ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é üòî\n–ö–∞–∫–æ–π —Ñ–∏–ª–∏–∞–ª –≤—ã–±–µ—Ä–∏—Ç–µ?',
        Markup.keyboard([
          Markup.locationRequestButton('üìç –£–∑–Ω–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–π —Ñ–∏–ª–∏–∞–ª'),
          ctx.i18n.t('back'),
        ], { columns: 1 }).resize().extra()
      )
    })
)